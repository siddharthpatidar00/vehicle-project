const jwt = require('jsonwebtoken');
const User = require('../models/UsersModel');
const Admin = require('../models/Admin');

exports.protect = async (req, res, next) => {
    let token;

    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
        token = req.headers.authorization.split(' ')[1];

        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            if (decoded.role === 'Admin') {
                // Token was generated by Admin login
                const admin = await Admin.findById(decoded.id).select('-password');
                if (!admin) {
                    return res.status(401).json({ message: 'Unauthorized: admin not found' });
                }
                req.user = {
                    id: admin._id,
                    email: admin.email,
                    role: 'Admin'
                };
            } else if (decoded.role === 'User') {
                // Token was generated by User login
                const user = await User.findById(decoded.id).select('-password -otp');
                if (!user) {
                    return res.status(401).json({ message: 'Unauthorized: user not found' });
                }
                req.user = {
                    id: user._id,
                    email: user.email,
                    role: 'User'
                };
            } else {
                return res.status(401).json({ message: 'Invalid role in token' });
            }

            next();
        } catch (err) {
            console.error('JWT Error:', err.message);
            return res.status(401).json({ message: 'Not authorized, token failed' });
        }
    } else {
        return res.status(401).json({ message: 'No token provided' });
    }
};


exports.protectOptional = async (req, res, next) => {
    let token;

    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
        token = req.headers.authorization.split(' ')[1];

        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            if (decoded.role === 'Admin') {
                const admin = await Admin.findById(decoded.id).select('-password');
                if (admin) {
                    req.user = { id: admin._id, email: admin.email, role: 'Admin' };
                }
            } else if (decoded.role === 'User') {
                const user = await User.findById(decoded.id).select('-password -otp');
                if (user) {
                    req.user = { id: user._id, email: user.email, role: 'User' };
                }
            }
        } catch (err) {
            console.error('JWT optional error:', err.message);
        }
    }

    next();
};


exports.adminOnly = (req, res, next) => {
    if (!req.user || req.user.role !== 'Admin') {
        return res.status(403).json({ message: 'Access denied: Admins only' });
    }
    next();
};
